{"ast":null,"code":"var _jsxFileName = \"/Users/alexandervancappellen/Desktop/messages/client/src/components/alert/AlertContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertRenderer } from './AlertRenderer';\nimport { Transition } from 'semantic-ui-react';\nimport history from './../../history'; // holds all the messages\n\nexport const AlertContainer = () => {\n  const dispatch = useDispatch(); // gets all the messages\n\n  const alerts = useSelector(state => state.alerts);\n  const socket = useSelector(state => state.socket);\n\n  if (history.location.pathname !== '/login') {\n    useEffect(() => {\n      socket.emit('get-alerts').on('get-alerts', res => {\n        if (res !== undefined) dispatch({\n          type: 'GET_ALERTS',\n          alerts: res\n        });\n      }).on('remove-alert', res => {\n        dispatch({\n          type: 'REMOVE_ALERT',\n          id: res\n        });\n      }).on('create-alert', alert => {\n        console.log(alert);\n      });\n    }, []);\n  }\n\n  if (alerts === [] || alerts === undefined) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  });else return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"alert-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, alerts.map(alert => /*#__PURE__*/React.createElement(AlertRenderer, {\n    key: alert.id,\n    alert: alert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/alexandervancappellen/Desktop/messages/client/src/components/alert/AlertContainer.js"],"names":["React","useEffect","useDispatch","useSelector","AlertRenderer","Transition","history","AlertContainer","dispatch","alerts","state","socket","location","pathname","emit","on","res","undefined","type","id","alert","console","log","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,OAAP,MAAoB,iBAApB,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B,CADgC,CAEhC;;AACA,QAAMO,MAAM,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,MAAhB,CAA1B;AACA,QAAME,MAAM,GAAGR,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA1B;;AAED,MAAGL,OAAO,CAACM,QAAR,CAAiBC,QAAjB,KAA8B,QAAjC,EAA0C;AACrCZ,IAAAA,SAAS,CAAC,MAAM;AACZU,MAAAA,MAAM,CACDG,IADL,CACU,YADV,EAEKC,EAFL,CAEQ,YAFR,EAEuBC,GAAD,IAAQ;AACtB,YAAIA,GAAG,KAAKC,SAAZ,EACIT,QAAQ,CAAC;AAACU,UAAAA,IAAI,EAAE,YAAP;AAAqBT,UAAAA,MAAM,EAAEO;AAA7B,SAAD,CAAR;AACP,OALL,EAMKD,EANL,CAMQ,cANR,EAMyBC,GAAD,IAAS;AACzBR,QAAAA,QAAQ,CAAC;AAACU,UAAAA,IAAI,EAAE,cAAP;AAAuBC,UAAAA,EAAE,EAAEH;AAA3B,SAAD,CAAR;AACH,OARL,EASKD,EATL,CASQ,cATR,EASyBK,KAAD,IAAW;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAXL;AAYH,KAbQ,EAaN,EAbM,CAAT;AAcH;;AAED,MAAIX,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAKQ,SAAhC,EACI,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,KAKI,oBACI;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMR,MAAM,CAACc,GAAP,CAAYH,KAAK,iBACf,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEA,KAAK,CAACD,EAA1B;AAA8B,IAAA,KAAK,EAAEC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFN,CADJ;AAQP,CApCM","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AlertRenderer } from './AlertRenderer'\nimport { Transition } from 'semantic-ui-react'\nimport history from './../../history'\n\n// holds all the messages\nexport const AlertContainer = () => {\n    const dispatch = useDispatch()\n    // gets all the messages\n    const alerts = useSelector(state => state.alerts)\n    const socket = useSelector(state => state.socket)\n\n   if(history.location.pathname !== '/login'){\n        useEffect(() => {\n            socket\n                .emit('get-alerts')\n                .on('get-alerts', (res) =>{\n                    if (res !== undefined)\n                        dispatch({type: 'GET_ALERTS', alerts: res})\n                })\n                .on('remove-alert', (res) => {\n                    dispatch({type: 'REMOVE_ALERT', id: res})\n                })\n                .on('create-alert', (alert) => {\n                    console.log(alert)\n                })\n        }, [])\n    }\n\n    if (alerts === [] || alerts === undefined)\n        return (\n            <div></div>\n        )\n    else\n        return (\n            <div id='alert-container'>\n                {/* itterates over all the massages in state and creates a message component for them*/}\n                { alerts.map( alert => \n                    <AlertRenderer key={alert.id} alert={alert} />\n                ) }\n            </div>\n        )\n}"]},"metadata":{},"sourceType":"module"}