{"ast":null,"code":"var _jsxFileName = \"/Users/alexandervancappellen/Desktop/messages/client/src/components/friends/FriendsSearch.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dropdown, Search, Divider, Button, Icon } from 'semantic-ui-react';\nimport constants from './../../constants';\nexport const FriendsSearch = () => {\n  const dispatch = useDispatch();\n  const friends = useSelector(state => state.friends);\n  const user = useSelector(state => state.user);\n  useEffect(() => {\n    return function unMount() {\n      dispatch({\n        type: 'CLEAR_SEARCH_STATE'\n      });\n    };\n  }, []);\n\n  const addFriend = friendId => {\n    fetch(`${constants.backendUrl}/add-friend/${friendId}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage['authToken']}`\n      }\n    }).then(res => res.json()).then(console.log);\n  };\n\n  const handleSearchChange = searchInput => {\n    if (searchInput !== friends.search.value || searchInput === false) {\n      if (searchInput !== '') {\n        fetch(`${constants.backendUrl}/search?value=${searchInput}${friends.search.filter}`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage['authToken']}`,\n            'Accept': 'application/json'\n          }\n        }).then(res => res.json()).then(response => {\n          response = response.res.filter(res => res.username === user.username ? false : true).map(res => {\n            return {\n              key: res.id,\n              image: res.avatar ? res.avatar : 'https://lh3.googleusercontent.com/proxy/a0_sHjUexkR334NasPUPJnlBDGmJDvp8m2w7U9lxZwNeH7a_YyuQvt9iNRESqGAXRE-u9W42_XjyFEvoBOJDG3ryKSmKLRY5THU3EcK55pqgkjPPtkIirg',\n              title: res.username,\n              fullname: `${res.first_name} ${res.last_name}`\n            };\n          });\n          dispatch({\n            type: 'SEARCH_USER_CHANGE',\n            object: {\n              'results': response,\n              'isLoading': false\n            }\n          });\n        });\n      } else dispatch({\n        type: 'SEARCH_USER_CHANGE',\n        object: {\n          results: []\n        }\n      });\n    }\n  }; // const categorizeResult = () => {\n  //     return {\n  //         results: {\n  //             users: {\n  //                 name: 'users',\n  //                 results: {\n  //                     ...friends.search.results.filter(friend => {\n  //                         Object.values(friends.friendList).includes(friend.id)\n  //                     })\n  //                 }\n  //             },\n  //             friends: {\n  //                 name: 'friends',\n  //                 results: {\n  //                 }\n  //             }\n  //         }\n  //     }\n  // }\n\n\n  const handleResultSelect = (e, {\n    result\n  }) => {\n    console.log(result);\n  };\n\n  const resultRenderer = user => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-result-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"search-result-img\",\n      alt: \"user avatar\",\n      src: user.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-result-username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, user.username), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-result-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, user.fullname), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"add-friend-btn-cont\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      compact: true,\n      fluid: true,\n      size: \"medium\",\n      color: \"teal\",\n      className: \"add-friend-btn\",\n      icon: \"add user\",\n      onClick: () => addFriend(user.title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    })));\n  };\n\n  const options = [{\n    text: 'username',\n    value: 'username'\n  }, {\n    text: 'full name',\n    value: \"fullName\"\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"friends-search-cont\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    id: \"friends-search-bar\",\n    loading: friends.search.value === '' ? false : friends.search.isLoading,\n    onResultSelect: handleResultSelect,\n    onSearchChange: e => {\n      dispatch({\n        type: 'SEARCH_USER_CHANGE',\n        object: {\n          'value': e.target.value,\n          'isLoading': true\n        }\n      });\n      handleSearchChange(e.target.value);\n    },\n    results: friends.search.results,\n    value: friends.search.value,\n    fluid: true,\n    resultRenderer: resultRenderer,\n    icon: /*#__PURE__*/React.createElement(Icon, {\n      name: \"search\",\n      color: \"teal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 23\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Dropdown, {\n    id: \"friend-search-dropdown\",\n    searchQuery: '&&filter=',\n    onChange: (e, res) => dispatch({\n      type: 'SEARCH_USER_CHANGE',\n      object: {\n        filter: res.searchQuery + res.value\n      }\n    }),\n    options: options,\n    selection: true,\n    icon: /*#__PURE__*/React.createElement(Icon, {\n      style: {\n        position: 'absolute',\n        right: 5\n      },\n      name: \"caret down\",\n      color: \"teal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 23\n      }\n    }),\n    defaultValue: \"username\",\n    color: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/alexandervancappellen/Desktop/messages/client/src/components/friends/FriendsSearch.js"],"names":["React","useEffect","useDispatch","useSelector","Dropdown","Search","Divider","Button","Icon","constants","FriendsSearch","dispatch","friends","state","user","unMount","type","addFriend","friendId","fetch","backendUrl","headers","localStorage","then","res","json","console","log","handleSearchChange","searchInput","search","value","filter","response","username","map","key","id","image","avatar","title","fullname","first_name","last_name","object","results","handleResultSelect","e","result","resultRenderer","options","text","isLoading","target","searchQuery","position","right"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Dropdown, Search, Divider, Button, Icon } from 'semantic-ui-react'\nimport constants from './../../constants'\n\nexport const FriendsSearch = () => {\n    const dispatch = useDispatch()\n    const friends = useSelector(state => state.friends)\n    const user = useSelector(state => state.user)\n\n    useEffect(() => {\n        return function unMount() {\n            dispatch({type: 'CLEAR_SEARCH_STATE'})\n        }\n    }, [])\n    \n    const addFriend = (friendId) => {\n        fetch(`${constants.backendUrl}/add-friend/${friendId}`, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage['authToken']}`,\n            }\n        }).then(res => res.json())\n        .then(console.log)\n    }\n\n    const handleSearchChange = (searchInput) => {\n        \n        if(searchInput !== friends.search.value || searchInput === false){\n            if(searchInput !== ''){\n                fetch(`${constants.backendUrl}/search?value=${searchInput}${friends.search.filter}`, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${localStorage['authToken']}`,\n                        'Accept': 'application/json' ,\n                    }\n                }).then(res => res.json())\n                .then(response => {\n                    response = response.res.filter( res => \n                        res.username === user.username ? false : true\n                    ).map(res => {\n                        return {\n                            key: res.id,\n                            image: res.avatar ? res.avatar : 'https://lh3.googleusercontent.com/proxy/a0_sHjUexkR334NasPUPJnlBDGmJDvp8m2w7U9lxZwNeH7a_YyuQvt9iNRESqGAXRE-u9W42_XjyFEvoBOJDG3ryKSmKLRY5THU3EcK55pqgkjPPtkIirg',\n                            title: res.username,\n                            fullname: `${res.first_name} ${res.last_name}`,\n                        }\n                    })      \n                    dispatch({type: 'SEARCH_USER_CHANGE', object: {'results': response, 'isLoading': false}})\n                })\n            }else\n                dispatch({type: 'SEARCH_USER_CHANGE', object: {results: []}})\n        }\n    }\n\n    // const categorizeResult = () => {\n    //     return {\n    //         results: {\n    //             users: {\n    //                 name: 'users',\n    //                 results: {\n    //                     ...friends.search.results.filter(friend => {\n    //                         Object.values(friends.friendList).includes(friend.id)\n    //                     })\n    //                 }\n    //             },\n    //             friends: {\n    //                 name: 'friends',\n    //                 results: {\n\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n\n    const handleResultSelect = (e, {result}) => {\n        console.log(result)\n    }\n    const resultRenderer = (user) => {\n        return(\n            <div className='search-result-container'>\n                <img className=\"search-result-img\" alt=\"user avatar\" src={user.image} />\n                <div className=\"search-result-username\" >{user.username}</div>\n                <div className=\"search-result-name\">{user.fullname}</div>\n                <div id='add-friend-btn-cont'>\n                    <Button \n                        compact fluid \n                        size='medium' \n                        color='teal' \n                        className=\"add-friend-btn\" \n                        icon='add user'\n                        onClick={() => addFriend(user.title)}\n                    />\n                </div>\n            </div>\n        )\n    }\n    const options = \n      [{text: 'username', value: 'username'}, {text: 'full name', value: \"fullName\"}]\n\n    return (\n        <div id=\"friends-search-cont\">\n            <Search \n                id='friends-search-bar'\n                loading={friends.search.value === ''  ? false : friends.search.isLoading}\n                onResultSelect={handleResultSelect}\n                onSearchChange={(e) => {\n                    dispatch({type: 'SEARCH_USER_CHANGE', object: {'value': e.target.value, 'isLoading': true}})\n                    handleSearchChange(e.target.value)\n                }\n                }\n                results={friends.search.results}\n                value={friends.search.value}\n                fluid\n                resultRenderer={resultRenderer}\n                icon={<Icon name='search' color='teal'/>}\n            />  \n            \n            <Dropdown \n                id=\"friend-search-dropdown\"\n                searchQuery={'&&filter='}\n                \n                onChange = {(e, res) => dispatch({type: 'SEARCH_USER_CHANGE', object:{filter: res.searchQuery + res.value}})}  \n                options={options} \n                selection \n                icon={<Icon style={{position: 'absolute', right: 5}} name='caret down' color='teal'/>}\n                defaultValue='username'\n                color='teal'\n                />\n     \n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}