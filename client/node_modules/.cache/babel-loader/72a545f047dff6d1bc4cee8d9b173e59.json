{"ast":null,"code":"var _jsxFileName = \"/Users/alexandervancappellen/Desktop/messages/client/src/components/alert/AlertContainer.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertRenderer } from './AlertRenderer';\nimport { Transition } from 'semantic-ui-react'; // holds all the messages\n\nexport const AlertContainer = () => {\n  const dispatch = useDispatch(); // gets all the messages\n\n  const alerts = useSelector(state => state.alerts);\n  const socket = useSelector(state => state.socket);\n  console.log(history.loca);\n  useEffect(() => {\n    socket.emit('get-alerts').on('get-alerts', res => {\n      if (res !== undefined) dispatch({\n        type: 'GET_ALERTS',\n        alerts: res\n      });\n    }).on('remove-alert', res => {\n      dispatch({\n        type: 'REMOVE_ALERT',\n        id: res\n      });\n    }).on('create-alert', alert => {\n      console.log(alert);\n    });\n  }, []);\n  if (alerts === [] || alerts === undefined) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  });else return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"alert-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, alerts.map(alert => /*#__PURE__*/React.createElement(AlertRenderer, {\n    key: alert.id,\n    alert: alert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/alexandervancappellen/Desktop/messages/client/src/components/alert/AlertContainer.js"],"names":["React","useEffect","useDispatch","useSelector","AlertRenderer","Transition","AlertContainer","dispatch","alerts","state","socket","console","log","history","loca","emit","on","res","undefined","type","id","alert","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADgC,CAEhC;;AACA,QAAMM,MAAM,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,MAAhB,CAA1B;AACA,QAAME,MAAM,GAAGP,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA1B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,IAApB;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,MAAM,CACDK,IADL,CACU,YADV,EAEKC,EAFL,CAEQ,YAFR,EAEuBC,GAAD,IAAQ;AACtB,UAAIA,GAAG,KAAKC,SAAZ,EACIX,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAE,YAAP;AAAqBX,QAAAA,MAAM,EAAES;AAA7B,OAAD,CAAR;AACP,KALL,EAMKD,EANL,CAMQ,cANR,EAMyBC,GAAD,IAAS;AACzBV,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,EAAE,EAAEH;AAA3B,OAAD,CAAR;AACH,KARL,EASKD,EATL,CASQ,cATR,EASyBK,KAAD,IAAW;AAC3BV,MAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AACH,KAXL;AAYH,GAbQ,EAaN,EAbM,CAAT;AAeA,MAAIb,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAKU,SAAhC,EACI,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,KAKI,oBACI;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMV,MAAM,CAACc,GAAP,CAAYD,KAAK,iBACf,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEA,KAAK,CAACD,EAA1B;AAA8B,IAAA,KAAK,EAAEC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFN,CADJ;AAQP,CAnCM","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AlertRenderer } from './AlertRenderer'\nimport { Transition } from 'semantic-ui-react'\n\n// holds all the messages\nexport const AlertContainer = () => {\n    const dispatch = useDispatch()\n    // gets all the messages\n    const alerts = useSelector(state => state.alerts)\n    const socket = useSelector(state => state.socket)\n\n    console.log(history.loca)\n    useEffect(() => {\n        socket\n            .emit('get-alerts')\n            .on('get-alerts', (res) =>{\n                if (res !== undefined)\n                    dispatch({type: 'GET_ALERTS', alerts: res})\n            })\n            .on('remove-alert', (res) => {\n                dispatch({type: 'REMOVE_ALERT', id: res})\n            })\n            .on('create-alert', (alert) => {\n                console.log(alert)\n            })\n    }, [])\n\n    if (alerts === [] || alerts === undefined)\n        return (\n            <div></div>\n        )\n    else\n        return (\n            <div id='alert-container'>\n                {/* itterates over all the massages in state and creates a message component for them*/}\n                { alerts.map( alert => \n                    <AlertRenderer key={alert.id} alert={alert} />\n                ) }\n            </div>\n        )\n}"]},"metadata":{},"sourceType":"module"}