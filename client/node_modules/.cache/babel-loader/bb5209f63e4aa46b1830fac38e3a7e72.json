{"ast":null,"code":"var _jsxFileName = \"/Users/alexandervancappellen/Desktop/messages/client/src/components/friends/FriendsSearch.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // to handle state change\n\nimport { Dropdown, Search, Icon } from 'semantic-ui-react'; // imports components from semantic ui\n\nimport { SearchResultRenderer } from './SearchResultRenderer'; // this is a single search result\n\nimport { useSocket } from './../../hooks/useSocket';\nimport history from '../../history';\nexport const FriendsSearch = () => {\n  const dispatch = useDispatch();\n  const friends = useSelector(state => state.friends); // the friends state\n\n  const user = useSelector(state => state.user); // the user state\n\n  const socket = useSocket();\n  useEffect(() => {\n    if (!socket) return history.push('/login'); // waits for the server to send a response\n\n    socket.on('search', foundFriends => {\n      // filters out the logged in user and changes the data so we can user it in the result renderer\n      const friends = foundFriends.filter(foundFriends => foundFriends.username === user.username ? false : true).map(friend => {\n        return {\n          key: friend.id,\n          image: friend.avatar ? friend.avatar : 'null',\n          title: friend.username || friend.title,\n          fullName: friend.fullName || `${friend.first_name} ${friend.last_name}`,\n          friendId: friend.id,\n          friendshipstatus: friend.friendship_status\n        };\n      });\n      let userIds = []; // removes all the duplicate users\n\n      const distinctUsers = friends.filter(friend => {\n        if (userIds.includes(friend.friendId)) return false;else userIds.push(friend.friendId);\n        return true;\n      });\n      dispatch({\n        type: 'SEARCH_USER_CHANGE',\n        object: {\n          'results': distinctUsers,\n          'isLoading': false\n        }\n      });\n    }) // waits for the server to say that a friend has been added\n    .on('add-friend', friend => {\n      if (user.id) {\n        dispatch({\n          type: 'ADD_FRIEND',\n          newFriend: friend\n        }); // generates an alert\n\n        socket.emit('add-alert', {\n          userId: user.id,\n          header: `Sent request`,\n          body: `A friend request has been send to: ${friend.username}`\n        }).emit('add-alert', {\n          userId: friend.friendId,\n          header: `Received request`,\n          body: `A friend request has been received from: ${user.username}`\n        }).emit('get-alerts');\n      }\n    }); // when the component dismounts the search input gets cleared\n\n    return function unMount() {\n      dispatch({\n        type: 'CLEAR_SEARCH_STATE'\n      });\n    };\n  }, [user, socket]); // runs when you type new data in the search component\n\n  const handleSearchChange = searchInput => {\n    if (searchInput !== friends.search.value || searchInput === false) {\n      if (searchInput !== '') {\n        socket.emit('search', {\n          value: searchInput,\n          filter: friends.search.filter\n        });\n      } else dispatch({\n        type: 'SEARCH_USER_CHANGE',\n        object: {\n          results: []\n        }\n      });\n    }\n  }; // runs when the add friend button gets pressed\n\n\n  const addFriend = friend => socket.emit('add-friend', friend); // runs when a result gets pressed\n\n\n  const handleResultSelect = (e, {\n    result\n  }) => {\n    const clickedFriend = result; // if the pressed item is the add friend button: adds a friend\n\n    if (e.target.id === 'addFriendBtn') {\n      addFriend({ ...clickedFriend,\n        id: clickedFriend.key\n      });\n      dispatch({\n        type: 'CLEAR_SEARCH_STATE'\n      });\n    } else {\n      // else logs the friend to the console\n      console.log(result);\n    }\n  }; // the filter options\n\n\n  const options = [{\n    text: 'username',\n    value: 'username'\n  }, {\n    text: 'full name',\n    value: \"fullName\"\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"friends-search-cont\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    id: \"friends-search-bar\",\n    loading: friends.search.value === '' ? false : friends.search.isLoading,\n    onResultSelect: handleResultSelect,\n    onSearchChange: e => {\n      dispatch({\n        type: 'SEARCH_USER_CHANGE',\n        object: {\n          'value': e.target.value,\n          'isLoading': true\n        }\n      });\n      handleSearchChange(e.target.value);\n    },\n    results: friends.search.results,\n    value: friends.search.value,\n    fluid: true,\n    resultRenderer: friend => /*#__PURE__*/React.createElement(SearchResultRenderer, {\n      friend: friend,\n      friendList: friends.friendList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 45\n      }\n    }),\n    icon: /*#__PURE__*/React.createElement(Icon, {\n      name: \"search\",\n      color: \"teal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Dropdown, {\n    id: \"friend-search-dropdown\",\n    onChange: (e, res) => dispatch({\n      type: 'SEARCH_USER_CHANGE',\n      object: {\n        filter: res.value\n      }\n    }),\n    options: options,\n    selection: true,\n    icon: /*#__PURE__*/React.createElement(Icon, {\n      style: {\n        position: 'absolute',\n        right: 5\n      },\n      name: \"caret down\",\n      color: \"teal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }),\n    defaultValue: \"username\",\n    color: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/alexandervancappellen/Desktop/messages/client/src/components/friends/FriendsSearch.js"],"names":["React","useEffect","useDispatch","useSelector","Dropdown","Search","Icon","SearchResultRenderer","useSocket","history","FriendsSearch","dispatch","friends","state","user","socket","push","on","foundFriends","filter","username","map","friend","key","id","image","avatar","title","fullName","first_name","last_name","friendId","friendshipstatus","friendship_status","userIds","distinctUsers","includes","type","object","newFriend","emit","userId","header","body","unMount","handleSearchChange","searchInput","search","value","results","addFriend","handleResultSelect","e","result","clickedFriend","target","console","log","options","text","isLoading","friendList","res","position","right"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux' // to handle state change\nimport { Dropdown, Search, Icon } from 'semantic-ui-react' // imports components from semantic ui\nimport { SearchResultRenderer } from './SearchResultRenderer' // this is a single search result\nimport { useSocket } from './../../hooks/useSocket'\nimport history from '../../history'\n\nexport const FriendsSearch = () => {\n    const dispatch = useDispatch()\n    const friends = useSelector(state => state.friends) // the friends state\n    const user = useSelector(state => state.user) // the user state\n    const socket = useSocket()\n\n    useEffect(() => {\n        if (!socket) return history.push('/login')\n            // waits for the server to send a response\n            socket.on('search', (foundFriends) => {\n                // filters out the logged in user and changes the data so we can user it in the result renderer\n                const friends = foundFriends.filter( foundFriends => \n                    foundFriends.username === user.username ? false : true\n                ).map(friend => {\n                    return {\n                        key: friend.id,\n                        image: friend.avatar ? friend.avatar : 'null',\n                        title: friend.username || friend.title,\n                        fullName: friend.fullName || `${friend.first_name} ${friend.last_name}`,\n                        friendId: friend.id,\n                        friendshipstatus: friend.friendship_status\n                    }\n                })\n                let userIds =  []\n                // removes all the duplicate users\n                const distinctUsers = friends.filter(friend => {\n                    if( userIds.includes(friend.friendId)) return false\n                    else userIds.push(friend.friendId)\n                    return true\n                })\n                dispatch({type: 'SEARCH_USER_CHANGE', object: {'results': distinctUsers, 'isLoading': false}})\n            })\n            // waits for the server to say that a friend has been added\n            .on('add-friend', (friend) => {\n                if(user.id){\n                    dispatch({type: 'ADD_FRIEND', newFriend: friend})\n                    // generates an alert\n                    socket\n                        .emit('add-alert', {userId: user.id, header: `Sent request`, body: `A friend request has been send to: ${friend.username}`})\n                        .emit('add-alert', {userId: friend.friendId, header: `Received request`, body: `A friend request has been received from: ${user.username}`})\n                        .emit('get-alerts')\n                }\n            })\n            // when the component dismounts the search input gets cleared\n            return function unMount() {\n                dispatch({type: 'CLEAR_SEARCH_STATE'})\n            };\n    }, [user, socket])\n\n    // runs when you type new data in the search component\n    const handleSearchChange = (searchInput) => {\n        if(searchInput !== friends.search.value || searchInput === false){\n            if(searchInput !== ''){\n                socket.emit('search', {value: searchInput, filter: friends.search.filter})\n            }else\n                dispatch({type: 'SEARCH_USER_CHANGE', object: {results: []}})\n        }\n    }\n\n    // runs when the add friend button gets pressed\n    const addFriend = (friend) => socket.emit('add-friend', friend)\n\n    // runs when a result gets pressed\n    const handleResultSelect = (e, {result}) => {\n        const clickedFriend = result\n        // if the pressed item is the add friend button: adds a friend\n        if(e.target.id === 'addFriendBtn'){\n            addFriend({...clickedFriend, id: clickedFriend.key})\n            dispatch({type: 'CLEAR_SEARCH_STATE'})\n        }else{\n            // else logs the friend to the console\n            console.log(result)\n        }\n    }\n\n    // the filter options\n    const options = [{text: 'username', value: 'username'}, {text: 'full name', value: \"fullName\"}]\n\n    return (\n        <div id=\"friends-search-cont\">\n            <Search \n                id='friends-search-bar'\n                loading={friends.search.value === ''  ? false : friends.search.isLoading}\n                onResultSelect={handleResultSelect}\n                onSearchChange={(e) => {\n                    dispatch({type: 'SEARCH_USER_CHANGE', object: {'value': e.target.value, 'isLoading': true}})\n                    handleSearchChange(e.target.value)\n                }\n                }\n                results={friends.search.results}\n                value={friends.search.value}\n                fluid\n                resultRenderer={(friend) => <SearchResultRenderer friend={friend} friendList={friends.friendList}/>}\n                icon={ <Icon name='search' color='teal'/> }\n            />  \n            \n            <Dropdown \n                id=\"friend-search-dropdown\"\n                onChange = {(e, res) => dispatch({type: 'SEARCH_USER_CHANGE', object:{filter: res.value}})}  \n                options={options} \n                selection \n                icon={\n                    <Icon style={{position: 'absolute', right: 5}} name='caret down' color='teal'/>\n                }\n                defaultValue='username'\n                color='teal'\n            />\n     \n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}