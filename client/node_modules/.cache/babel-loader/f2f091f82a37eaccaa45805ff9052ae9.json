{"ast":null,"code":"var _jsxFileName = \"/Users/alexandervancappellen/Desktop/messages/client/src/components/friends/Friends.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; // to handle state\n\nimport { Header, Icon } from 'semantic-ui-react'; // imports semantic ui components\n\nimport { useSocket } from './../../socket.config'; // gets the active websocket\n\nimport { FriendsGrid } from './FriendsGrid'; // the tabs (blocked, friends, pending)\n\nimport { FriendsSearch } from './FriendsSearch'; // the searchBar component\n\nexport const Friends = () => {\n  const dispatch = useDispatch();\n  const fetchedFriends = useSelector(state => state.friends.fetchedFriends);\n  const userData = useSelector(state => state.user);\n  const token = sessionStorage['authToken'];\n  const socket = useSocket(token);\n  useEffect(() => {\n    // gets friends if they are not in state\n    if (!fetchedFriends) socket.emit('get-friends'); // gets all the user data if it is not stored in state yet\n\n    if (!userData.id) socket.emit('get-user-data'); // listens for incomming sockets\n\n    socket.on('get-friends', res => {\n      dispatch({\n        type: 'UPDATE_FRIEND_LIST',\n        friends: res\n      });\n    }).on('get-user-data', data => {\n      dispatch({\n        type: 'SAVE_USER_DATA',\n        data: data[0]\n      });\n    }); // listens for the incomming change-friend-status request and puts it in state\n    // We call it here because else it would run for every friend card\n\n    socket.on('change-friend-status', res => {\n      if (res.success) {\n        console.log(res);\n        dispatch({\n          type: 'CHANGE_FRIEND_STATUS',\n          friendID: res.friendId,\n          status: res.status\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"friends-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    id: \"main-header\",\n    as: \"h2\",\n    icon: true,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"users\",\n    color: \"teal\",\n    circular: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, \"Friends\")), /*#__PURE__*/React.createElement(FriendsSearch, {\n    user: userData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FriendsGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/alexandervancappellen/Desktop/messages/client/src/components/friends/Friends.js"],"names":["React","useEffect","useSelector","useDispatch","Header","Icon","useSocket","FriendsGrid","FriendsSearch","Friends","dispatch","fetchedFriends","state","friends","userData","user","token","sessionStorage","socket","emit","id","on","res","type","data","success","console","log","friendID","friendId","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAAuD;;AACvD,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B,C,CAAiD;;AACjD,SAASC,SAAT,QAA0B,uBAA1B,C,CAAkD;;AAClD,SAASC,WAAT,QAA4B,eAA5B,C,CAA4C;;AAC5C,SAASC,aAAT,QAA8B,iBAA9B,C,CAAgD;;AAEhD,OAAO,MAAMC,OAAO,GAAG,MAAM;AACzB,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,cAAc,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcF,cAAxB,CAAlC;AACA,QAAMG,QAAQ,GAAGZ,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAA5B;AACA,QAAMC,KAAK,GAAGC,cAAc,CAAC,WAAD,CAA5B;AACA,QAAMC,MAAM,GAAGZ,SAAS,CAACU,KAAD,CAAxB;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI,CAACU,cAAL,EAAqBO,MAAM,CAACC,IAAP,CAAY,aAAZ,EAFT,CAGZ;;AACA,QAAI,CAACL,QAAQ,CAACM,EAAd,EAAkBF,MAAM,CAACC,IAAP,CAAY,eAAZ,EAJN,CAKZ;;AACAD,IAAAA,MAAM,CACDG,EADL,CACQ,aADR,EACwBC,GAAD,IAAS;AACxBZ,MAAAA,QAAQ,CAAC;AAACa,QAAAA,IAAI,EAAE,oBAAP;AAA6BV,QAAAA,OAAO,EAAES;AAAtC,OAAD,CAAR;AACH,KAHL,EAIKD,EAJL,CAIQ,eAJR,EAI0BG,IAAD,IAAU;AAC3Bd,MAAAA,QAAQ,CAAC;AAACa,QAAAA,IAAI,EAAE,gBAAP;AAAyBC,QAAAA,IAAI,EAAEA,IAAI,CAAC,CAAD;AAAnC,OAAD,CAAR;AACH,KANL,EANY,CAaZ;AACA;;AACAN,IAAAA,MAAM,CAACG,EAAP,CAAU,sBAAV,EAAmCC,GAAD,IAAS;AACvC,UAAGA,GAAG,CAACG,OAAP,EAAe;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAZ,QAAAA,QAAQ,CAAC;AAACa,UAAAA,IAAI,EAAE,sBAAP;AAA+BK,UAAAA,QAAQ,EAAGN,GAAG,CAACO,QAA9C;AAAwDC,UAAAA,MAAM,EAAER,GAAG,CAACQ;AAApE,SAAD,CAAR;AACH;AACJ,KALD;AAMH,GArBQ,EAqBN,EArBM,CAAT;AAuBA,sBACI;AAAK,IAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,EAAE,EAAC,aAAX;AAAyB,IAAA,EAAE,EAAC,IAA5B;AAAiC,IAAA,IAAI,MAArC;AAAsC,IAAA,SAAS,EAAC,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,KAAK,EAAC,MAAzB;AAAgC,IAAA,QAAQ,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CADJ,eAKI,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEhB,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAMI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ;AAUH,CAxCM","sourcesContent":["import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux' // to handle state\nimport { Header, Icon } from 'semantic-ui-react' // imports semantic ui components\nimport { useSocket } from './../../socket.config' // gets the active websocket\nimport { FriendsGrid } from './FriendsGrid' // the tabs (blocked, friends, pending)\nimport { FriendsSearch } from './FriendsSearch' // the searchBar component\n\nexport const Friends = () => {\n    const dispatch = useDispatch()\n    const fetchedFriends = useSelector(state => state.friends.fetchedFriends)\n    const userData = useSelector(state => state.user)\n    const token = sessionStorage['authToken']\n    const socket = useSocket(token)\n\n    useEffect(() => {\n        // gets friends if they are not in state\n        if (!fetchedFriends) socket.emit('get-friends')\n        // gets all the user data if it is not stored in state yet\n        if (!userData.id) socket.emit('get-user-data')\n        // listens for incomming sockets\n        socket\n            .on('get-friends', (res) => {\n                dispatch({type: 'UPDATE_FRIEND_LIST', friends: res})\n            })\n            .on('get-user-data', (data) => {\n                dispatch({type: 'SAVE_USER_DATA', data: data[0]})\n            })\n        // listens for the incomming change-friend-status request and puts it in state\n        // We call it here because else it would run for every friend card\n        socket.on('change-friend-status', (res) => {\n            if(res.success){\n                console.log(res)\n                dispatch({type: 'CHANGE_FRIEND_STATUS', friendID : res.friendId, status: res.status})\n            }\n        })\n    }, [])\n\n    return(\n        <div id=\"friends-container\">\n            <Header id=\"main-header\" as='h2' icon textAlign='center'>\n                <Icon name='users' color='teal' circular />\n                <Header.Content>Friends</Header.Content>\n            </Header>\n            <FriendsSearch user={userData} />\n            <FriendsGrid />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}